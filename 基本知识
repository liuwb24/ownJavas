JAVA最基础
    一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协调工作。
    API(Application Programming Interface, 应用程序编程接口)：Java写好的程序(功能代码)，可以直接调用

JDK的组成：JRE包括JVM、核心类库     开发工具java、javac
        JVM(Java Virtual Machine): Java虚拟机，真正运行Java程序的地方
        核心类库：Java自己写好的程序，给程序员自己的程序调用
        JRE(Java Runtime Environment)：Java的运行环境
        JDK(Java Development Kit)：Java开发工具包
Java的跨平台、工作原理：一次编译，出处可用
Path环境变量：环境变量用于记住程序路径，方便命令行窗口的任意目录启动程序。我的电脑->属性->高级系统设置->高级->环境变量

基本语法&基础
         注意：大小写敏感；类名首字母大写；方法名应该都是小写字母开头；源文件名必须与类名相同；所有java程序有public static void mian (String [] args)开始执行

基本数据类型
        变量就是申请内存来存储值，当创建变量的时候，需要内存中申请空间。内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来存储该类型数据。
Java两大数据类型：内置数据类型；引用数据类型
     
Java标识符：
        所有标识符都以字母、美元符、或者下划线开始；首字符之后可以是字母、美元符、下划线或者数字的任何字符组合；
        关键字不能用作标识符；标识符大小写敏感；

Java修饰符：
        访问控制修饰符：default, publc, protected, private
        非访问控制修饰符：final, abstract, static, synchronized
类型转换：
        自动类型转换：类型范围小的变量，可以直接赋值给类型范围大的变量
        表达式的自动类型转换：表达式中的最终结果类型由表达式中的最高类型决定。在表达式中byte, char, short 直接转换成 int 类型参与运算
        强制类型转换：强制将大范围的变量转换为小范围的变量（可能会造成数据移溢出；浮点型->整型，直接丢掉小数部分，保留整数部分返回）

Java运算符：
        算数运算符：+ 号做连接符
        自增、自减：++  --  只能操作变量，不能操作字面量
        赋值运算符：扩展的赋值运算符隐含了强制类型转换        +=  -=  *=  /=  %=
        关系运算符：对数据进行条件判断的符号，最终会返回一个比较的布尔结果(false, true)
                ==  !=  >=  <=  
        逻辑运算符：可以把多个条件的布尔结果放在一起运算，最终返回一个布尔结果
                & 逻辑与    | 逻辑或    ! 逻辑非    ^ 逻辑异或    短路与&&    短路或||
        三元运算符： 表达式 ? 值1 : 值2 

程序流程控制：  顺序结构、分支结构、循环结构
         分支结构：if  switch 
        循环结构：for  while 

Java变量：
        局部变量、类变量（静态变量）、成员变量（非局部变量）

Java数组：
        数组是存储在堆上的对象，可以保存多个同类型变量(用来存储一批同种类型数据的内存区域)
        声明数组：int [] a;                 长度为0的数组与null不相同 
        访问数组元素：for each 循环——for (variable : collection ) statement  collection集合表达式必须是一个数组或者是一个实现Iterable接口的类对象，词=此循环将会遍历数组中的每个元素。
        数组拷贝：copyof()
        命令行参数：每一个Java应用程序都有一个带String arg[]的main方法，这个餐护士表名mian 方法将接收一个字符串数组
        数组排序：Arrays.sort()
        静态化数组：定义数组的时候直接赋值——数据类型[] 数组变量名 = new 数据类型[]{'',''}
        动态化数组：定义数组的时候只确定元素的类型和数组的长度，之后再存入具体的数据  数据类型[] 数组名 = new 数据类型[长度]
元素默认值规则：整型默认值0， 字符型的默认值也是0，浮点型默认值0.0，布尔型默认值false，引用类型默认值null
        数组的遍历：for循环

数组使用的常见问题：
        1.如果访问的元素位置超过最大索引，执行时会出现ArrayIndexOutOfBoundsException(数组索引越界异常)
        2.如果数组中没有存储数组的地址，而是null，在访问数组信息时会出现NullPointerException(空指针异常)

Java内存分配    
        栈内存：方法运行时所进入的内存变量也是这里、堆内存：new出来的东西(对象)会在这块内存中开辟空间并产生地址、
        方法区：字节码文件加载进入的内存   本地方法栈 寄存器

Java枚举：
        枚举限制变量只能是预先设定好的值，使用枚举可以减少代码中的bug
        枚举可以单独声明或声明在类里面。方法、变量、构造函数也可以在枚举中定义。

Java关键字：
        访问控制： private 私有的；protected 受保护的；public 公共的；dedault 默认
        类、方法和变量修饰符：abstract 声明抽象；class类；extends 继承；final最终值，不可改变的；implements 实现接口
                            interface 接口；native 本地，原生方法（非java实现）；new 新创建一个对象；static静态；
                            strictfp严格，精准；synchronized线程，同步；transient 短暂；volatile 易失；
        程序控制语句：break 跳出循环；case 定义一个值以供switch选择；continue 继续；default 默认；do 运行；else 否则；
                            for循环；if如果；instanceof实例；return 返回；switch 根据值选择执行；while 循环；
        错误处理：assert 断言表达是否为真；catch 捕捉异常；finally 有没有异常都执行；throw 抛出一个异常； throws声明一个异常可能被抛出
                        try 捕获异常 
        包相关：import 引入，导入； package 包
        基本类型：boolean 布尔型；byte 字节型；char 字符型；double 双精度浮点； float单精度浮点；int 整型；long 长整型；short 短整型
        变量引用：super 父类，超类； this 本类；void 无返回值
        保留关键字：goto是关键字，但不能使用；const 是关键字，但不能使用

Java的方法：
        使用方法的好处：提高了代码的复用性，让程序的逻辑清晰
方法的定义：修饰符 返回值类型 方法名(形参列表){需要执行功能的代码 return 返回值;}
        -- 方法编写顺序无所谓
        -- 方法与方法之间是平级关系，不能嵌套定义
        -- 方法的返回值类型是void，方法内则不能使用return返回数据，如果方法的返回值类型写了具体类型，方法内部必须使用return返回对应类型的数据
        -- return语句下面不能编写代码，因为永远也不能执行到，属于无效的代码
        -- 方法不调用就不执行，调用时必须严格匹配方法的参数情况
        -- 有返回值的方法调用时可以选择定义变量接收结果，或者直接输出调用，甚至直接调用；无返回值的方法的调用只能调用一下

方法的参数传递机制：值传递
        在传输实参给方法的形参的时候，并不是传输实参变量本身，而是传输实参变量中存储的值，这就是值传递
        引用类型的参数传递机制：传地址
方法重载：同一个类中出现多个方法名称相同，但是形参列表是不同的，那么这些方法就是重载方法。
        作用：可读性好，方法名称相同提示是同一类型的功能，通过形参不同的实现功能差异化的选择，这是一种专业的代码设计。
        识别技巧：只要是同一个类中，方法名称相同、形参列表不同，那么他们就是重载方法(修饰符，返回类型都不管)
